[supervisord]
nodaemon=true
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
user=root

[program:kasmvnc]
; --- FINAL CORRECTED LOGIC ---
; After re-analyzing the /usr/bin/kasmvncserver perl script, the correct
; way to make it a long-running process for supervisor is to use the
; script's OWN '-fg' (foreground) flag.
;
; The script is designed to:
; 1. Accept the '-fg' flag.
; 2. Launch the real /usr/bin/Xvnc server in the background.
; 3. Wait for the Xvnc process to terminate.
; 4. Clean up and exit itself.
;
; This is the exact behavior supervisor needs to monitor the process correctly.
; My previous error was passing '-fg' to Xvnc directly, which it doesn't support.
command=bash -c "rm -f /tmp/.X1-lock /tmp/.X11-unix/X1 && echo 2 | /usr/bin/kasmvncserver -fg -websocketPort 6901 -sslOnly=0 -DisableBasicAuth -debug"
user=kasm
environment=HOME="/home/kasm",USER="kasm",DISPLAY=":1"
priority=1
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:nginx]
command=/usr/sbin/nginx -g "daemon off;"
priority=5
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:node_api]
command=bash -c "echo '[node_api_wrapper] Starting Node.js with DISPLAY=$DISPLAY' && /usr/bin/node /usr/src/app/server.js"
directory=/usr/src/app
environment=DISPLAY=":1"
priority=5
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

; Add supervisorctl interface
[unix_http_server]
file=/var/run/supervisor.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

